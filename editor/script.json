{
  "config": {},
  "scripts": [
    {
      "name": "Demo",
      "source": [
        "const { Vector3, WebGL1Renderer } = await import(\"../third_party/three.module.js\");",
        "const { Effect } = await import(\"../effects/intro.js\");",
        "const { Composer } = await import(\"../js/Composer.js\");",
        "",
        "const dom = resources.get( 'dom' );",
        "",
        "const renderer = new WebGL1Renderer({ antialias: true });",
        "renderer.setPixelRatio(window.devicePixelRatio);",
        "renderer.setClearColor(0, 0);",
        "renderer.extensions.get(\"OES_standard_derivatives\");",
        "renderer.extensions.get(\"EXT_shader_texture_lod\");",
        "dom.append(renderer.domElement);",
        "",
        "const composer = new Composer(renderer, 1, 1);",
        "",
        "const effects = [];",
        "",
        "const intro = new Effect(renderer);",
        "effects.push(intro);",
        "",
        "function render(t) {",
        "  intro.render(t);",
        "  composer.render(intro.post.fbo);",
        "}",
        "",
        "function resize() {",
        "  let w = dom.clientWidth;",
        "  let h = dom.clientHeight;",
        "  renderer.setSize(w, h);",
        "",
        "  const dPR = window.devicePixelRatio;",
        "  w *= dPR;",
        "  h *= dPR;",
        "  intro.setSize(w, h);",
        "  composer.setSize(w, h);",
        "}",
        "",
        "window.addEventListener(\"resize\", resize);",
        "",
        "",
        "const audio = document.createElement(\"audio\");",
        "audio.src = \"./assets/track.mp3\";",
        "audio.preload = true;",
        "const audioPromise = new Promise((resolve, reject) => {",
        "  audio.addEventListener(\"canplay\", (e) => {",
        "    resolve();",
        "  });",
        "});",
        "",
        "window.promises = [];",
        "",
        "async function init() {",
        "  console.log(\"Loading...\");",
        "  const preload = [audioPromise];",
        "  for (const effect of effects) {",
        "    preload.push(effect.initialise());",
        "  }",
        "  await Promise.all(preload);",
        "  resize();",
        "  console.log(\"Ready...\");",
        "}",
        "",
        "init();",
        " ",
        "intro.camera.fov = 50;",
        "intro.camera.updateProjectionMatrix();",
        "",
        "const cameraTarget = new Vector3();",
        " ",
        "resources.set('audio', audio);",
        "resources.set('intro', intro);",
        "resources.set('render', render);",
        "resources.set('camera', intro.camera);",
        "resources.set('cameraTarget', cameraTarget);"
      ]
    },
    {
      "name": "Shape",
      "source": [
        "const intro = resources.get( 'intro' );",
        "",
        "const shape = {",
        "\tuniforms: intro.geoShader.uniforms,",
        "\tpostUniforms: intro.post.shader.uniforms,",
        "\treset: function () {",
        "\t\tintro.geoShader.uniforms.smoothness.value = 1.0;",
        "\t\tintro.geoShader.uniforms.tetrahedronFactor.value = 0.0;",
        "\t\tintro.geoShader.uniforms.cubeFactor.value = 0.0;",
        "\t\tintro.geoShader.uniforms.octahedronFactor.value = 0.0;",
        "\t\tintro.geoShader.uniforms.icosahedronFactor.value = 0.0;",
        "\t\tintro.geoShader.uniforms.dodecahedronFactor.value = 0.0;",
        "\t\tintro.geoShader.uniforms.sphereFactor.value = 0.0;",
        "",
        "\t\tintro.geoShader.uniforms.exposureDiffuse.value = 0.0;",
        "\t\tintro.geoShader.uniforms.exposureSpecular.value = 1.0;",
        "\t\tintro.geoShader.uniforms.roughness.value = 1.0;",
        "\t\tintro.geoShader.uniforms.normalScale.value = 1.0;",
        "\t\tintro.geoShader.uniforms.texScale.value = 0.1;",
        "\t\tintro.geoShader.uniforms.stripeFreq.value = 1.0;",
        "\t\tintro.geoShader.uniforms.stripeOffset.value = 1.0;",
        "",
        "\t\tintro.final.shader.uniforms.radius.value = 1.0;",
        "\t\tintro.blurStrength = 1.0;",
        "\t\tintro.final.shader.uniforms.exposure.value = 1.0;",
        "\t}",
        "}",
        "",
        "resources.set( 'shape', shape );"
      ]
    }
  ],
  "effects": [
    {
      "name": "Render",
      "source": [
        "var parameters = {};",
        "",
        "const render = resources.get( 'render' );",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\trender( progress * 140 );",
        "",
        "}"
      ]
    },
    {
      "name": "Audio Player",
      "source": [
        "var audio = resources.get( 'audio' );",
        "",
        "function start(){",
        "",
        "\tplayer.setAudio( audio );",
        "",
        "}",
        "",
        "function end(){",
        "",
        "\tplayer.setAudio( null );",
        "",
        "}",
        "",
        "function update( progress ){}"
      ]
    },
    {
      "name": "Camera Intro",
      "source": [
        "const camera = resources.get( 'camera' );",
        "const target = resources.get( 'cameraTarget' );",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "\t",
        "\tconst invProgress = 1 - progress;",
        "",
        "\tcamera.position.set( 0,  - 40 * invProgress, - 10 );",
        "",
        "\ttarget.x = Math.cos( progress * 8 ) * 4;",
        "\ttarget.y = Math.sin( progress * 4 ) * 4;",
        "\ttarget.z = - 20;",
        "\tcamera.lookAt( target );",
        "",
        "}"
      ]
    },
    {
      "name": "Camera Side",
      "source": [
        "const camera = resources.get( 'camera' );",
        "const target = resources.get( 'cameraTarget' );",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "\t",
        "\tconst invProgress = 1 - progress;",
        "",
        "\tcamera.position.set( 4 - progress * 2, 1, - 7 * invProgress - 2 );",
        "\t",
        "\ttarget.x = Math.sin( progress * 4 ) * 2;",
        "\ttarget.y = Math.cos( progress * 5 );",
        "\ttarget.z = - 10 * invProgress + 2;",
        "\tcamera.lookAt( target );",
        "\tcamera.rotation.z = Math.PI / 2;",
        "",
        "}"
      ]
    },
    {
      "name": "Camera Back",
      "source": [
        "const camera = resources.get( 'camera' );",
        "const target = resources.get( 'cameraTarget' );",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "\t",
        "\tconst invProgress = 1 - progress;",
        "",
        "\tcamera.position.set( 0, 0, invProgress * 10 + 4 );",
        "\t",
        "\ttarget.set( 0, - 7 * invProgress, 0 );",
        "\tcamera.lookAt( target );",
        "",
        "}"
      ]
    },
    {
      "name": "Camera Orbit 1",
      "source": [
        "const camera = resources.get( 'camera' );",
        "const target = resources.get( 'cameraTarget' );",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "\t",
        "\tconst invProgress = 1 - progress;",
        "\t",
        "\tconst amount = - 10;",
        "\tconst distance = 4;",
        "",
        "\tcamera.position.x = Math.cos( progress * amount ) * distance;",
        "\tcamera.position.y = 0;",
        "\tcamera.position.z = Math.sin( progress * amount ) * distance;",
        "",
        "\ttarget.x = Math.cos( progress * 8 ) * 0.25;",
        "\ttarget.y = Math.sin( progress * 12 ) * 0.25;",
        "\ttarget.z = Math.sin( progress * 6 ) * 0.5;",
        "\tcamera.lookAt( target );",
        "\t",
        "}"
      ]
    },
    {
      "name": "Camera Orbit 2",
      "source": [
        "const camera = resources.get( 'camera' );",
        "const target = resources.get( 'cameraTarget' );",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "\t",
        "\tconst invProgress = 1 - progress;",
        "\t",
        "\tconst amount = 7;",
        "\tconst distance = 3;",
        "",
        "\tcamera.position.x = Math.cos( progress * amount ) * distance;",
        "\tcamera.position.y = 0;",
        "\tcamera.position.z = Math.sin( progress * amount ) * distance;",
        "",
        "\ttarget.x = Math.cos( progress * 8 ) * 0.5;",
        "\ttarget.y = Math.sin( progress * 12 ) * 0.5;",
        "\ttarget.z = Math.sin( progress * 6 );",
        "\tcamera.lookAt( target );",
        "}"
      ]
    },
    {
      "name": "Camera Top",
      "source": [
        "const camera = resources.get( 'camera' );",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "\t",
        "\tcamera.position.set( 0, 6, progress * 6 );",
        "\tcamera.rotation.set( - Math.PI / 2, 0, 0 );",
        "",
        "}"
      ]
    },
    {
      "name": "Shape Sphere",
      "source": [
        "const shape = resources.get( 'shape' );",
        "",
        "function start(){",
        "",
        "\tshape.reset();",
        "\t",
        "}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\tshape.uniforms.smoothness.value = 0.0;",
        "\tshape.uniforms.tetrahedronFactor.value = 1.0;",
        "}"
      ]
    },
    {
      "name": "Shape Transform 1",
      "source": [
        "const shape = resources.get( 'shape' );",
        "",
        "function start(){",
        "",
        "\tshape.reset();",
        "",
        "}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\tconst invProgress = 1.0 - progress;",
        "",
        "\tshape.uniforms.smoothness.value = progress;",
        "\tshape.uniforms.cubeFactor.value = progress;",
        "\tshape.uniforms.tetrahedronFactor.value = invProgress;",
        "",
        "\t",
        "}"
      ]
    },
    {
      "name": "Effect",
      "source": [
        "var parameters = {",
        "\tvalue: new FRAME.Parameters.Float( 'Value', 1.0 )",
        "};",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){}"
      ]
    },
    {
      "name": "Effect",
      "source": [
        "const shape = resources.get( 'shape' );",
        "",
        "function start(){",
        "",
        "\tshape.reset();",
        "",
        "}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\tconst invProgress = 1.0 - progress;",
        "",
        "\tshape.uniforms.octahedronFactor.value = progress;",
        "\tshape.uniforms.cubeFactor.value = invProgress;",
        "\t",
        "}"
      ]
    },
    {
      "name": "Effect",
      "source": [
        "const shape = resources.get( 'shape' );",
        "",
        "function start(){",
        "",
        "\tshape.reset();",
        "",
        "}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\tconst invProgress = 1.0 - progress;",
        "",
        "\tshape.uniforms.icosahedronFactor.value = progress;",
        "\tshape.uniforms.octahedronFactor.value = invProgress;",
        "",
        "\t",
        "}"
      ]
    },
    {
      "name": "Effect",
      "source": [
        "const shape = resources.get( 'shape' );",
        "",
        "function start(){",
        "",
        "\tshape.reset();",
        "",
        "}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\tconst invProgress = 1.0 - progress;",
        "",
        "\tshape.uniforms.dodecahedronFactor.value = progress;",
        "\tshape.uniforms.icosahedronFactor.value = invProgress;",
        "",
        "\t",
        "}"
      ]
    },
    {
      "name": "Effect",
      "source": [
        "const shape = resources.get( 'shape' );",
        "",
        "function start(){",
        "",
        "\tshape.reset();",
        "",
        "}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\tconst invProgress = 1.0 - progress;",
        "",
        "\tshape.uniforms.sphereFactor.value = progress;",
        "\tshape.uniforms.dodecahedronFactor.value = invProgress;",
        "",
        "\t",
        "}"
      ]
    },
    {
      "name": "Fade In",
      "source": [
        "const shape = resources.get( 'shape' );",
        "",
        "function start(){",
        "\tshape.postUniforms.opacity.value = 1;",
        "}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\tshape.postUniforms.opacity.value = progress;",
        "",
        "\t",
        "}"
      ]
    },
    {
      "name": "Fade Out",
      "source": [
        "const shape = resources.get( 'shape' );",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\tconst invProgress = 1.0 - progress;",
        "\tshape.postUniforms.opacity.value = invProgress;",
        "",
        "\t",
        "}"
      ]
    },
    {
      "name": "Flashes",
      "source": [
        "const intro = resources.get( 'intro' );",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\tconst length = 0.677;",
        "\tconst amount = ( length - ( player.currentTime % length ) ) * 2;",
        "\t// intro.final.shader.uniforms.exposure.value = amount;",
        "\tintro.geoShader.uniforms.exposureDiffuse.value = amount;",
        "",
        "}"
      ]
    },
    {
      "name": "Roughness",
      "source": [
        "const shape = resources.get( 'shape' );",
        "",
        "function start(){}",
        "",
        "function end(){}",
        "",
        "function update( progress ){",
        "",
        "\tshape.uniforms.roughness.value = progress;",
        "\tshape.uniforms.normalScale.value = progress;",
        "",
        "}"
      ]
    }
  ],
  "animations": [
    {
      "name": "Audio",
      "start": 0,
      "end": 93.28125,
      "layer": 0,
      "effectId": 1,
      "enabled": true
    },
    {
      "name": "",
      "start": 0,
      "end": 10.869036255162927,
      "layer": 1,
      "effectId": 2,
      "enabled": true
    },
    {
      "name": "",
      "start": 0,
      "end": 20,
      "layer": 3,
      "effectId": 8,
      "enabled": true
    },
    {
      "name": "",
      "start": 0,
      "end": 93.3125,
      "layer": 5,
      "effectId": 0,
      "enabled": true
    },
    {
      "name": "",
      "start": 0,
      "end": 2,
      "layer": 6,
      "effectId": 15,
      "enabled": true
    },
    {
      "name": "",
      "start": 0,
      "end": 93.32352941176474,
      "layer": 7,
      "effectId": 18,
      "enabled": true
    },
    {
      "name": "Animation",
      "start": 1.1875,
      "end": 3.1875,
      "layer": -1,
      "effectId": 10,
      "enabled": true
    },
    {
      "name": "",
      "start": 10.873625516291883,
      "end": 21.956048636744423,
      "layer": 2,
      "effectId": 3,
      "enabled": true
    },
    {
      "name": "",
      "start": 20.15625,
      "end": 21.78125,
      "layer": 4,
      "effectId": 9,
      "enabled": true
    },
    {
      "name": "",
      "start": 21.94687011448651,
      "end": 32.89155350639713,
      "layer": 1,
      "effectId": 4,
      "enabled": true
    },
    {
      "name": "Animation",
      "start": 32.893292682926834,
      "end": 37.799542682926834,
      "layer": 4,
      "effectId": 11,
      "enabled": true
    },
    {
      "name": "",
      "start": 32.89405487804878,
      "end": 76.77640781922523,
      "layer": 6,
      "effectId": 17,
      "enabled": true
    },
    {
      "name": "",
      "start": 32.8949555337806,
      "end": 43.90522361680466,
      "layer": 2,
      "effectId": 5,
      "enabled": true
    },
    {
      "name": "",
      "start": 43.88178962690344,
      "end": 54.76260883029899,
      "layer": 1,
      "effectId": 6,
      "enabled": true
    },
    {
      "name": "Animation",
      "start": 43.90625,
      "end": 49.4375,
      "layer": 4,
      "effectId": 12,
      "enabled": true
    },
    {
      "name": "",
      "start": 54.769329382685434,
      "end": 65.8384155893726,
      "layer": 2,
      "effectId": 5,
      "enabled": true
    },
    {
      "name": "Animation",
      "start": 54.90625,
      "end": 59.375,
      "layer": 4,
      "effectId": 13,
      "enabled": true
    },
    {
      "name": "",
      "start": 65.83409090012138,
      "end": 76.81118804358601,
      "layer": 1,
      "effectId": 6,
      "enabled": true
    },
    {
      "name": "Animation",
      "start": 65.96875,
      "end": 71.6875,
      "layer": 4,
      "effectId": 14,
      "enabled": true
    },
    {
      "name": "",
      "start": 76.80023880904011,
      "end": 93.29886084431503,
      "layer": 2,
      "effectId": 7,
      "enabled": true
    },
    {
      "name": "",
      "start": 91.3125,
      "end": 93.3125,
      "layer": 6,
      "effectId": 16,
      "enabled": true
    }
  ]
}
